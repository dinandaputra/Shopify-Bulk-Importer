name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Set up test environment
      run: |
        cp .env.example .env.test
        export SHOPIFY_ACCESS_TOKEN=test_access_token
        export SHOPIFY_API_KEY=test_api_key
        export SHOPIFY_API_SECRET=test_api_secret
        export SHOPIFY_SHOP_DOMAIN=test-shop.myshopify.com

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional .

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --tb=short --cov=. --cov-report=xml --cov-report=term

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v --tb=short

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with bandit
      run: |
        bandit -r . -x tests/,venv/

    - name: Safety check for known vulnerabilities
      run: |
        safety check

  performance:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Run performance tests
      run: |
        python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

    - name: Store benchmark result
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'pytest'
        output-file-path: benchmark.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test Streamlit app startup
      run: |
        timeout 30s streamlit run streamlit_app.py --server.headless true --server.port 8501 --server.address 0.0.0.0 &
        sleep 10
        curl -f http://localhost:8501 || exit 1

    - name: Create deployment artifact
      if: github.ref == 'refs/heads/main'
      run: |
        tar czf shopify-bulk-importer.tar.gz \
          --exclude='.git' \
          --exclude='tests' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          .

    - name: Upload artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: shopify-bulk-importer
        path: shopify-bulk-importer.tar.gz